package telas;

import boxbuster.BancoDeDadosClientes;
import boxbuster.Cadastrado;
import boxbuster.Visitante;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author josembs
 */
public class LoginCliente extends javax.swing.JFrame {
    
    // inicia o banco de dados dos clientes
    BancoDeDadosClientes bdClientes = new BancoDeDadosClientes();
    
    // deixa todos os campos invisíveis até alguma opção ser escolhida na combo box
    public LoginCliente() { 
        setLocationRelativeTo(null);
        initComponents();
        txtfNome.setEnabled(false);
        lblNome.setVisible(false);
        txtfNome.setVisible(false);
        lblCPF.setVisible(false);
        txtfCPF.setEnabled(false);
        txtfCPF.setVisible(false);
        lblDataNascimento.setVisible(false);
        txtfDataNascimento.setEnabled(false);
        txtfDataNascimento.setVisible(false);
        lblSenha.setVisible(false);
        txtfSenha.setVisible(false);
        txtfSenha.setEnabled(false);
        btnLogin.setVisible(false);
        btnLogin.setEnabled(false);
        btnLoja.setVisible(false);
        btnLoja.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCadCli = new javax.swing.JPanel();
        lblPropaganda1 = new javax.swing.JLabel();
        lblPropaganda2 = new javax.swing.JLabel();
        lblSituacao = new javax.swing.JLabel();
        cmbSituacao = new javax.swing.JComboBox<>();
        lblNome = new javax.swing.JLabel();
        txtfNome = new javax.swing.JTextField();
        lblCPF = new javax.swing.JLabel();
        lblDataNascimento = new javax.swing.JLabel();
        lblSenha = new javax.swing.JLabel();
        txtfSenha = new javax.swing.JTextField();
        logoBoxbuster = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnLoja = new javax.swing.JButton();
        txtfCPF = new javax.swing.JFormattedTextField();
        txtfDataNascimento = new javax.swing.JFormattedTextField();
        menuBarCadCli = new javax.swing.JMenuBar();
        menuCadCli = new javax.swing.JMenu();
        menuVoltarCadCli = new javax.swing.JMenuItem();
        separator1CadCli = new javax.swing.JPopupMenu.Separator();
        menuSairCadCli = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tela de login");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/boxLogo.png")).getImage());

        pnlCadCli.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro de Cliente"));

        lblPropaganda1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPropaganda1.setForeground(new java.awt.Color(255, 0, 0));
        lblPropaganda1.setText("CLIENTES CADASTRADOS GANHAM DIVERSOS BENEFÍCIOS");

        lblPropaganda2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPropaganda2.setForeground(new java.awt.Color(255, 0, 0));
        lblPropaganda2.setText("INCLUINDO DESCONTO EM TODOS OS PRODUTOS!");

        lblSituacao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSituacao.setText("Você quer se cadastrar?");

        cmbSituacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma opção", "Quero me cadastrar", "Não quero me cadastrar", "Já sou cadastrado" }));
        cmbSituacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSituacaoActionPerformed(evt);
            }
        });

        lblNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNome.setText("Nome:");
        lblNome.setToolTipText("");

        lblCPF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCPF.setText("CPF:");

        lblDataNascimento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDataNascimento.setText("Data de nascimento:");

        lblSenha.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSenha.setText("Senha:");

        logoBoxbuster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/boxLogoBig.png"))); // NOI18N

        btnLogin.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLogin.setText("Cadastrar-se");
        btnLogin.setEnabled(false);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnVoltar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnLoja.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLoja.setText("Entrar e ir à loja");
        btnLoja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLojaActionPerformed(evt);
            }
        });

        try {
            txtfCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            txtfDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout pnlCadCliLayout = new javax.swing.GroupLayout(pnlCadCli);
        pnlCadCli.setLayout(pnlCadCliLayout);
        pnlCadCliLayout.setHorizontalGroup(
            pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCadCliLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSituacao)
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addComponent(lblDataNascimento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtfDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addComponent(lblCPF)
                        .addGap(18, 18, 18)
                        .addComponent(txtfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSenha)
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(txtfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addComponent(lblNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE)
                .addComponent(logoBoxbuster)
                .addGap(24, 24, 24))
            .addGroup(pnlCadCliLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVoltar)
                .addGap(60, 60, 60)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLoja)
                .addContainerGap())
            .addGroup(pnlCadCliLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(lblPropaganda1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlCadCliLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(lblPropaganda2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCadCliLayout.setVerticalGroup(
            pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCadCliLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblPropaganda1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPropaganda2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSituacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addComponent(cmbSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNome)
                            .addComponent(txtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCPF)
                            .addComponent(txtfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDataNascimento)
                            .addComponent(txtfDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSenha)
                            .addComponent(txtfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(logoBoxbuster))
                .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCadCliLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(pnlCadCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVoltar)
                            .addComponent(btnLoja)))
                    .addComponent(btnLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        menuCadCli.setText("Menu");

        menuVoltarCadCli.setText("Voltar");
        menuVoltarCadCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVoltarCadCliActionPerformed(evt);
            }
        });
        menuCadCli.add(menuVoltarCadCli);
        menuCadCli.add(separator1CadCli);

        menuSairCadCli.setText("Sair");
        menuSairCadCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairCadCliActionPerformed(evt);
            }
        });
        menuCadCli.add(menuSairCadCli);

        menuBarCadCli.add(menuCadCli);

        setJMenuBar(menuBarCadCli);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCadCli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCadCli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // volta pra tela principal
    private void menuVoltarCadCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVoltarCadCliActionPerformed
        new TelaPrincipal().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuVoltarCadCliActionPerformed
    
    // realiza o cadastro/login do cliente, sendo ele cadastrado ou visitante, e leva para a área do cliente com suas informações
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        int index = cmbSituacao.getSelectedIndex();
        
        if(index == 1){
            if(txtfNome.getText().equals("") || txtfCPF.getText().equals("") || txtfDataNascimento.getText().equals("") || txtfSenha.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            }
            else{
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String nome = txtfNome.getText();
                String CPF = txtfCPF.getText();
                
                if(!bdClientes.buscarPessoa(CPF).isEmpty()){
                    String[] palavras = bdClientes.buscarPessoa(CPF).get(0).split("_");
                    if(palavras[0].equals("Cadastrado")){
                        JOptionPane.showMessageDialog(null, "Esse CPF já está vinculado à outra conta", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        bdClientes.removerPessoa(CPF);
                        Date dataNascimento = null;
                        String dataNascimentoString = txtfDataNascimento.getText();
                        String divida = palavras[4];
                        
                        try {
                            dataNascimento = formato.parse(dataNascimentoString);
                        } catch (ParseException ex) {
                            Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        String senha = txtfSenha.getText();
                        Cadastrado cadastrado = new Cadastrado(nome, CPF, dataNascimento, Double.parseDouble(divida), senha);
                        
                        BancoDeDadosClientes.setClienteAtual(cadastrado);
                        bdClientes.adicionarPessoa(cadastrado);
                        AreaCliente telaCliente = new AreaCliente();
                        telaCliente.setVisible(true);

                        this.setVisible(false);
                    }
                } else {
                    Date dataNascimento = null;
                    String dataNascimentoString = txtfDataNascimento.getText();
                    
                    try {
                        dataNascimento = formato.parse(dataNascimentoString);
                    } catch (ParseException ex) {
                        Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    String senha = txtfSenha.getText();
                    Cadastrado cadastrado = new Cadastrado(nome, CPF, dataNascimento, 0, senha);
                    
                    BancoDeDadosClientes.setClienteAtual(cadastrado);
                    bdClientes.adicionarPessoa(cadastrado);
                    AreaCliente telaCliente = new AreaCliente();
                    telaCliente.setVisible(true);

                    this.setVisible(false);
                }
            }
        } else if(index == 2){
            if(txtfNome.getText().equals("") || txtfCPF.getText().equals("") || txtfDataNascimento.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            } else {
                String CPF = txtfCPF.getText();
                ArrayList<String> lista = bdClientes.buscarPessoa(CPF);
                
                if(lista.isEmpty()){
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String nome = txtfNome.getText();
                    Date dataNascimento = null;
                    String dataNascimentoString = txtfDataNascimento.getText();
                    
                    try {
                        dataNascimento = formato.parse(dataNascimentoString);
                    } catch (ParseException ex) {
                        Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    Visitante visitante = new Visitante(nome, CPF, dataNascimento, 0);
                    
                    bdClientes.adicionarPessoa(visitante);
                    BancoDeDadosClientes.setClienteAtual(visitante);
                    AreaCliente telaCliente = new AreaCliente();
                    telaCliente.setVisible(true);
                
                    this.setVisible(false);
                    
                } else {
                    Date dataNascimento = null;
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String[] palavras = lista.get(0).split("_");
                    
                    if (palavras[0].equals("Cadastrado")){
                        JOptionPane.showMessageDialog(null, "Esse CPF está associado à um cadastrado.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        String nome = palavras[1];
                        String dataNascimentoString = palavras[3];
                        String divida = palavras[4];
                        
                        try {
                            dataNascimento = formato.parse(dataNascimentoString);
                        } catch (ParseException ex) {
                            Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        Visitante visitante = new Visitante(nome, CPF, dataNascimento, Double.parseDouble(divida));
                        
                        BancoDeDadosClientes.setClienteAtual(visitante);
                        
                        AreaCliente telaCliente = new AreaCliente();
                        telaCliente.setVisible(true);

                        this.setVisible(false);
                    }
                }
            }
        } else if(index == 3){
            if(txtfCPF.getText().equals("")|| txtfSenha.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            } else {
                String CPF = txtfCPF.getText();
                Date dataNascimento = null;
                String senha = txtfSenha.getText();
                ArrayList<String> lista = bdClientes.buscarPessoa(CPF);
                
                if(lista.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Não existe nenhuma pessoa já cadastrada com esse CPF.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                } else {
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String[] palavras = lista.get(0).split("_");
                    
                    if (palavras[0].equals("Visitante")){
                        JOptionPane.showMessageDialog(null, "Esse CPF está associado à um visitante.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        String nome = palavras[1];
                        String dataNascimentoString = palavras[3];
                        String divida = palavras[4];
                        String senhaChecar = palavras[5];
                        
                        try {
                            dataNascimento = formato.parse(dataNascimentoString);
                        } catch (ParseException ex) {
                            Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        if(!senha.equals(senhaChecar)){
                            JOptionPane.showMessageDialog(null, "A senha está incorreta.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                        } else {
                            Cadastrado cadastrado = new Cadastrado(nome, CPF, dataNascimento, Double.parseDouble(divida), senha);
                            
                            BancoDeDadosClientes.setClienteAtual(cadastrado);  
                            
                            AreaCliente telaCliente = new AreaCliente();
                            telaCliente.setVisible(true);

                            this.setVisible(false);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    //volta para a tela principal
    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        new TelaPrincipal().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnVoltarActionPerformed
    
    // realiza o cadastro/login do cliente, sendo ele cadastrado ou visitante, e leva para a loja com suas informações
    private void btnLojaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLojaActionPerformed
        int index = cmbSituacao.getSelectedIndex();
        
        if(index == 1){
            if(txtfNome.getText().equals("") || txtfCPF.getText().equals("") || txtfDataNascimento.getText().equals("") || txtfSenha.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            } else {
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String nome = txtfNome.getText();
                String CPF = txtfCPF.getText();
                Date dataNascimento = null;
                String dataNascimentoString = txtfDataNascimento.getText();
                
                try {
                    dataNascimento = formato.parse(dataNascimentoString);
                } catch (ParseException ex) {
                    Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                String senha = txtfSenha.getText();
                Cadastrado cadastrado = new Cadastrado(nome, CPF, dataNascimento, 0, senha);
                
                BancoDeDadosClientes.setClienteAtual(cadastrado);
                bdClientes.adicionarPessoa(cadastrado);
                
                Loja telaLoja = new Loja();
                telaLoja.setVisible(true);
                
                this.setVisible(false);
            }
        } else if(index == 2){
            if(txtfNome.getText().equals("") || txtfCPF.getText().equals("") || txtfDataNascimento.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            } else {
                String CPF = txtfCPF.getText();
                ArrayList<String> lista = bdClientes.buscarPessoa(CPF);
                
                if(lista.isEmpty()){
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String nome = txtfNome.getText();
                    Date dataNascimento = null;
                    String dataNascimentoString = txtfDataNascimento.getText();
                    
                    try {
                        dataNascimento = formato.parse(dataNascimentoString);
                    } catch (ParseException ex) {
                        Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    Visitante visitante = new Visitante(nome, CPF, dataNascimento, 0);
                    
                    bdClientes.adicionarPessoa(visitante);
                    BancoDeDadosClientes.setClienteAtual(visitante);
                    
                    if(BancoDeDadosClientes.getClienteAtual() != null && BancoDeDadosClientes.getClienteAtual().getDivida() > 0){
                        JOptionPane.showMessageDialog(null, "É necessário pagar sua dívida e devolver os\nprodutos atrasados para realizar novos pedidos.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        new Loja().setVisible(true);
                        this.setVisible(false);
                    }
                
                    this.setVisible(false);
                    
                } else {
                    Date dataNascimento = null;
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String[] palavras = lista.get(0).split("_");
                    
                    if (palavras[0].equals("Cadastrado")){
                        JOptionPane.showMessageDialog(null, "Esse CPF está associado à um cadastrado.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        String nome = palavras[1];
                        String dataNascimentoString = palavras[3];
                        String divida = palavras[4];
                        
                        try {
                            dataNascimento = formato.parse(dataNascimentoString);
                        } catch (ParseException ex) {
                            Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        Visitante visitante = new Visitante(nome, CPF, dataNascimento, Double.parseDouble(divida));
                        
                        BancoDeDadosClientes.setClienteAtual(visitante);
                        
                        if(Double.parseDouble(divida) > 0){
                            JOptionPane.showMessageDialog(null, "É necessário pagar sua dívida e devolver os\nprodutos atrasados para realizar novos pedidos.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                            new AreaCliente().setVisible(true);
                            this.setVisible(false);
                        } else {
                            Loja telaLoja = new Loja();
                            telaLoja.setVisible(true);

                            this.setVisible(false);
                        }
                    }
                }
            }
        } else if(index == 3){
            if(txtfCPF.getText().equals("")|| txtfSenha.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            } else {
                String CPF = txtfCPF.getText();
                Date dataNascimento = null;
                String senha = txtfSenha.getText();
                ArrayList<String> lista = bdClientes.buscarPessoa(CPF);
                
                if(lista.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Não existe nenhuma pessoa já cadastrada com esse CPF.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                } else {
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String[] palavras = lista.get(0).split("_");
                    
                    if (palavras[0].equals("Visitante")){
                        JOptionPane.showMessageDialog(null, "Esse CPF está associado à um visitante.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        String nome = palavras[1];
                        String dataNascimentoString = palavras[3];
                        String divida = palavras[4];
                        String senhaChecar = palavras[5];
                        
                        try {
                            dataNascimento = formato.parse(dataNascimentoString);
                        } catch (ParseException ex) {
                            Logger.getLogger(LoginCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        if(!senha.equals(senhaChecar)){
                            JOptionPane.showMessageDialog(null, "A senha está incorreta.", "Mensagem", JOptionPane.PLAIN_MESSAGE);

                        } else {
                            Cadastrado cadastrado = new Cadastrado(nome, CPF, dataNascimento, Double.parseDouble(divida), senha);
                            BancoDeDadosClientes.setClienteAtual(cadastrado);
                            
                            if(Double.parseDouble(divida) > 0){
                                JOptionPane.showMessageDialog(null, "É necessário pagar sua dívida e devolver\n os produtos atrasados para realizar novos pedidos.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
                                new AreaCliente().setVisible(true);
                                this.setVisible(false);
                            } else {
                                Loja telaLoja = new Loja();
                                telaLoja.setVisible(true);

                                this.setVisible(false);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnLojaActionPerformed
    
    //deixa visível ou invisível os campos de acordo com o que foi selecionado na combo box
    private void cmbSituacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSituacaoActionPerformed
        int index = cmbSituacao.getSelectedIndex();
        if(index == 1){
            txtfNome.setEnabled(true);
            lblNome.setVisible(true);
            txtfNome.setVisible(true);
            lblCPF.setVisible(true);
            txtfCPF.setVisible(true);
            txtfCPF.setEnabled(true);
            txtfDataNascimento.setEnabled(true);
            lblDataNascimento.setVisible(true);
            txtfDataNascimento.setVisible(true);
            lblSenha.setVisible(true);
            txtfSenha.setVisible(true);
            txtfSenha.setEnabled(true);
            btnLogin.setEnabled(true);
            btnLogin.setVisible(true);
            btnLogin.setText("Cadastrar-se");
            btnLoja.setVisible(true);
            btnLoja.setEnabled(true);
        } else if(index == 3){
            txtfNome.setEnabled(false);
            lblNome.setVisible(false);
            txtfNome.setVisible(false);
            lblCPF.setVisible(true);
            txtfCPF.setVisible(true);
            txtfCPF.setEnabled(true);
            txtfDataNascimento.setEnabled(false);
            lblDataNascimento.setVisible(false);
            txtfDataNascimento.setVisible(false);
            lblSenha.setVisible(true);
            txtfSenha.setVisible(true);
            txtfSenha.setEnabled(true);
            btnLogin.setEnabled(true);
            btnLogin.setVisible(true);
            btnLogin.setText("Ver Perfil");
            btnLoja.setVisible(true);
            btnLoja.setEnabled(true);
        } else if(index == 2){
            txtfNome.setEnabled(true);
            lblNome.setVisible(true);
            txtfNome.setVisible(true);
            lblCPF.setVisible(true);
            txtfCPF.setVisible(true);
            txtfCPF.setEnabled(true);
            txtfDataNascimento.setEnabled(true);
            lblDataNascimento.setVisible(true);
            txtfDataNascimento.setVisible(true);
            lblSenha.setVisible(false);
            txtfSenha.setVisible(false);
            txtfSenha.setEnabled(false);
            btnLogin.setEnabled(true);
            btnLogin.setEnabled(true);
            btnLogin.setVisible(true);
            btnLogin.setText("Ver Perfil");
            btnLoja.setVisible(true);
            btnLoja.setEnabled(true);
        } else{
            txtfNome.setEnabled(false);
            lblNome.setVisible(false);
            txtfNome.setVisible(false);
            lblCPF.setVisible(false);
            txtfCPF.setEnabled(false);
            txtfCPF.setVisible(false);
            lblDataNascimento.setVisible(false);
            txtfDataNascimento.setEnabled(false);
            txtfDataNascimento.setVisible(false);
            lblSenha.setVisible(false);
            txtfSenha.setVisible(false);
            txtfSenha.setEnabled(false);
            btnLogin.setEnabled(false);
            btnLogin.setVisible(false);
            btnLoja.setVisible(false);
            btnLoja.setEnabled(false);
        }
    }//GEN-LAST:event_cmbSituacaoActionPerformed

    private void menuSairCadCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairCadCliActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuSairCadCliActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLoja;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cmbSituacao;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblDataNascimento;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPropaganda1;
    private javax.swing.JLabel lblPropaganda2;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblSituacao;
    private javax.swing.JLabel logoBoxbuster;
    private javax.swing.JMenuBar menuBarCadCli;
    private javax.swing.JMenu menuCadCli;
    private javax.swing.JMenuItem menuSairCadCli;
    private javax.swing.JMenuItem menuVoltarCadCli;
    private javax.swing.JPanel pnlCadCli;
    private javax.swing.JPopupMenu.Separator separator1CadCli;
    private javax.swing.JFormattedTextField txtfCPF;
    private javax.swing.JFormattedTextField txtfDataNascimento;
    private javax.swing.JTextField txtfNome;
    private javax.swing.JTextField txtfSenha;
    // End of variables declaration//GEN-END:variables
}
